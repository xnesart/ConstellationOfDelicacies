@using ConstellationOfDelicacies.Bll.Clients
@using ConstellationOfDelicacies.Bll.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using ConstellationOfDelicacies.Web.Components.Pages.Auth
@using ConstellationOfDelicacies.Web.Components.Templates.Worker
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<AuthorizeView Roles="Сотрудник">
    <Authorized>
        <PageTitle>Мои задачи</PageTitle>
        <h3>Ваши задачи:</h3>
        <Card>
            <CardBody class="container dashboard-container">
                @if (_tasks.Count() != 0)
                {
                    <CardGroup Class="dashboard-cardgroup">
                        @foreach (var task in _tasks)
                        {
                            <div class="worker-card">
                                <DashBoardCardTemplate Task="@task" UserId="@UserId" UpdatePage="OnUpdatePage"/>
                            </div>
                        }
                    </CardGroup>
                }
                else
                {
                    <p>У вас еще нет задач</p>
                }
            </CardBody>
        </Card>
    </Authorized>
    <NotAuthorized>
        <HomeRedirect/>
    </NotAuthorized>
</AuthorizeView>

@code {
    private ITaskClient _client;

    private List<TasksOutputModel> _tasks;
    private List<OrdersOutputModel> _orders;
    private int UserId;

    public Action OnUpdatePage;

    public WorkerDashboard()
    {
        OnUpdatePage = UpdatePage;

        _client = new TaskClient();
        _tasks = new List<TasksOutputModel>();
        _orders = new List<OrdersOutputModel>();
    }    

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            UserId = int.Parse(user.FindFirst("UserId").Value);
        }

        GetTaskForWorker();
    }

    private void GetTaskForWorker()
    {
        _tasks = _client.GetAllWorkerTasks(UserId);
    }    

    public void UpdatePage()
    {
        GetTaskForWorker();
    }

}