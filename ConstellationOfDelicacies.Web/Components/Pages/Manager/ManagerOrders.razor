@using ConstellationOfDelicacies.Web.Components.Templates.Manager
@using ConstellationOfDelicacies.Web.Components.Pages.Auth
@using ConstellationOfDelicacies.Bll.Interfaces
@using ConstellationOfDelicacies.Bll.Clients
@using ConstellationOfDelicacies.Bll.Enums
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject NavigationManager navManager
@rendermode InteractiveServer

<AuthorizeView Roles="Менеджер">
    <Authorized>
        <PageTitle>Мои заказы</PageTitle>

        @if (_orders.Count() == 0)
        {
            <Card>
                <CardBody>
                    <CardText>У вас еще нет заказов</CardText>
                </CardBody>
            </Card>
        }
        else
        {
            <div class="mb-2">
                <Button @onclick="AllOrders" Color="ButtonColor.Info">Все</Button>
                <Button @onclick="InProgressOrders" Color="ButtonColor.Primary">В работе</Button>
                <Button @onclick="CompletedOrders" Color="ButtonColor.Success">Завершенные</Button>
                <Button @onclick="DeletedOrders" Color="ButtonColor.Danger">Удаленные</Button>
            </div>
            <div>
                @foreach (var o in _sortedOrders)
                {
                    <div>
                        <ManagerOrderCardTemplate Order="o" />
                    </div>
                }
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <HomeRedirect/>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }

    private List<Claim> claims = new List<Claim>();

    private List<OrdersOutputModel> _orders;
    private List<OrdersOutputModel> _sortedOrders;

    private int _managerId;

    public ManagerOrders()
    {
        _orders = new List<OrdersOutputModel>();
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await State;
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims.ToList();

            _managerId = Int32.Parse(claims.Where(c => c.Type == "UserId").Single().Value);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();

        IOrderClient orderClient = new OrderClient();
        _orders = orderClient.GetManagerOrders(_managerId);
        _sortedOrders = _orders;

        await base.OnInitializedAsync();
    }

    private void AllOrders()
    {
        _sortedOrders = _orders;
        StateHasChanged();
    }

    private void InProgressOrders()
    {
        _sortedOrders = _orders.Where(o => o.Status == OrderStatuses.InProgress).ToList();
        StateHasChanged();
    }

    private void DeletedOrders()
    {
        _sortedOrders = _orders.Where(o => o.Status == OrderStatuses.Deleted).ToList();
        StateHasChanged();
    }

    private void CompletedOrders()
    {
        _sortedOrders = _orders.Where(o => o.Status == OrderStatuses.Completed).ToList();
        StateHasChanged();
    }

}