@page "/order{orderId:int}"
@using ConstellationOfDelicacies.Bll.Enums
@using ConstellationOfDelicacies.Bll.Clients
@using ConstellationOfDelicacies.Bll.Interfaces
@using ConstellationOfDelicacies.Bll.Models.InputModels;
@using ConstellationOfDelicacies.Web.Components.Pages.Auth
@using ConstellationOfDelicacies.Web.Components.Templates.Manager
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject NavigationManager navManager
@rendermode InteractiveServer

<AuthorizeView Roles="Менеджер" >
    <Authorized>
        <PageTitle>Заказ</PageTitle>

        <div>
            <OrderCardTemplate Order="_order" UpdatePage="OnUpdatePage"/>
        </div>
        <div>
            <OrderTasksListTemplate Order="_order" UpdatePage="OnUpdatePage"/>
        </div>
    </Authorized>

    <NotAuthorized>
        <HomeRedirect/>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }

    private List<Claim> claims = new List<Claim>();

    [Parameter]
    public int orderId { get; set; }

    private IOrderClient _client;
    private IUserClient _userClient;

    private OrdersOutputModel _order;
    private UsersOutputModel _manager;

    private Action OnUpdatePage;

    public OrderEditManager()
    {
        OnUpdatePage = UpdatePage;

        _client = new OrderClient();
        _userClient = new UserClient();

        _order = new OrdersOutputModel();
        _manager = new UsersOutputModel();
    }

    private async Task GetClaims()
    {
        var authState = await State;
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims.ToList();
            var userId = Int32.Parse(claims.Where(c => c.Type == "UserId").First().Value);

            if (userId != _manager.Id)
            {
                navManager.NavigateTo("./");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _order = _client.GetOrderById(orderId);
        if(_order.Id != orderId)
        {
            navManager.NavigateTo("./");
        }

        _manager = _userClient.GetOrderManager(orderId);
        await GetClaims();
    }

    public void UpdatePage()
    {
        _client.UpdateOrderPrice(orderId);
        _order = _client.GetOrderById(orderId);
        StateHasChanged();
    }    
}
