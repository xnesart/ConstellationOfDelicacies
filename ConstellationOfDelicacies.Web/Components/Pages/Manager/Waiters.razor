@page "/waiters"
@rendermode InteractiveServer
@using ConstellationOfDelicacies.Bll.IManager

<div class="top-row top-row-manager manager-top-bar">
    <a class="top-bar-link" href="/manager">Мои заявки</a>
    <a class="top-bar-link" href="/applications">Все заявки</a>
    <a class="top-bar-link" href="/chiefs">Редактировать поваров</a>
    <a class="top-bar-link current-page" href="/waiters">Редактировать официантов</a>
</div>
<a class="btn btn-primary add-waiter-link" href="./waiter">Добавить официанта</a>

<div class="waiters-container">
    <div class="waiters-field">

        @foreach (var waiter in _waiters)
        {
            <div class="waiters-card">
                <p class="waiters-id">Id: @waiter.Id</p>
                <p class="waiters-name">Имя: @waiter.Name</p>
                <p class="waiters-phone">Телефон: @waiter.Phone</p>
                <p class="waiters-mail">Почта: @waiter.Mail</p>
                <a href="./waiters/@waiter.Id" class="waiter-edit-link">Редактировать</a>
                <button @onclick="() => RemoveWaiter(waiter.Id)" class="btn btn-primary" type="button">Удалить</button>
            </div>
        }
    </div>
</div>

@code {
    private List<WorkerOutputModel> _waiters;
    IManager _manager = new ManagerMock();

    public Waiters()
    {
        _waiters = _manager.GetAllWaiters();
    }

    protected override void OnInitialized()
    {
        _waiters = _manager.GetAllWaiters();
    }

    private void RemoveWaiter(int id)
    {
        _manager.RemoveWaiter(id);
        _waiters = _manager.GetAllWaiters();
    }

}