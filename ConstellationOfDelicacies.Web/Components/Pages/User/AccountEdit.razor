@page "/account"
@using Microsoft.AspNetCore.Components.Authorization
@using ConstellationOfDelicacies.Bll.Models.InputModels
@using ConstellationOfDelicacies.Bll.Clients
@using System.Security.Claims
@inject NavigationManager navManager
@rendermode InteractiveServer

<h3>Редактирование Ваших данных</h3>
<div class="login-form">
    <EditForm class="row g-3" Model="@Model" OnValidSubmit="@SaveChanges" FormName="LoginForm">
        <DataAnnotationsValidator/>
        <div class="col-md-12">
            <label for="login-name" class="form-label">Введите имя:</label>
            <InputText type="text" class="form-control" id="login-name" placeholder="Имя"
                       @bind-Value="Model.FirstName"/>
        </div>
        <div class="col-md-12">
            <label for="login-lastName" class="form-label">Введите фамилию:</label>
            <InputText type="text" class="form-control" id="login-lastName" placeholder="Фамилия"
                       @bind-Value="Model.LastName"/>
        </div>
        <div class="col-md-12">
            <label for="login-middleName" class="form-label">Введите отчество:</label>
            <InputText type="text" class="form-control" id="login-middleName" placeholder="Отчество"
                       @bind-Value="Model.MiddleName"/>
        </div>   
        <div class="col-md-12">
            <label for="login-phone" class="form-label">Введите телефон:</label>
            <InputText type="text" class="form-control" id="login-phone" placeholder="Телефон"
                       @bind-Value="Model.Phone"/>
        </div>
        <div class="col-md-12" lass="col-12">
            <button type="submit" class="btn btn-primary">Сохранить изменения</button>
        </div>    
        <div class="col-md-12" lass="col-12">
            <a href="/edit-mail" class="btn btn-primary">Изменить почту</a>
        </div> 
        <div class="col-md-12" lass="col-12">
            <a href="/edit-password" class="btn btn-primary">Изменить пароль</a>
        </div>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    public AccountEditInputModel Model { get; set; }
    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    
    public UserClient UserClient { get; set; } = new UserClient();

    private int _userId;


    public AccountEdit()
    {
        Model = new AccountEditInputModel();
    }
    
    protected override void OnInitialized()
    {
        GetUserIdFromClaims();
        var user = UserClient.GetAllUsers().Where(u => u.Id == _userId).FirstOrDefault();
        Model.FirstName = user.FirstName;
        Model.LastName = user.LastName;
        Model.MiddleName = user.MiddleName;
        Model.Phone = user.Phone;
        base.OnInitialized();
    }
    
    public void SaveChanges()
    {
        var user = UserClient.GetAllUsers().Where(u => u.Id == _userId).FirstOrDefault();
        RolesInputModel roleInput = new RolesInputModel()
        {
            Id = user.Role.Id,
            Title = user.Role.Title
        };
  
        UsersInputModel userModel = new UsersInputModel()
        {
            Id=user.Id,
            FirstName = Model.FirstName,
            LastName = Model.LastName,
            MiddleName = Model.MiddleName,
            Phone = Model.Phone,
            Mail = Model.Mail,
            Password = Model.Password,
            Role = roleInput
        };
        
        UserClient.UpdateUser(userModel);
        navManager.NavigateTo("./");  
    }
    
    private async void GetUserIdFromClaims()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        var userId = user.FindFirst(c => c.Type == "UserId")?.Value;
        _userId = int.Parse(userId);
    }
}