@page "/myorders"
@using ConstellationOfDelicacies.Web.Components.Templates.User
@using ConstellationOfDelicacies.Web.Components.Pages.Auth
@using ConstellationOfDelicacies.Bll.Interfaces
@using ConstellationOfDelicacies.Bll.Clients
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System
@rendermode InteractiveServer

<AuthorizeView Roles="Пользователь">
    <Authorized>
        <PageTitle>Мои заказы</PageTitle>

        <Card>
            <CardBody>
                <div>
                    <CardTitle>Мои заказы:</CardTitle>
                    <CardSubTitle Style="margin-bottom: 5px;">
                        Чтобы отменить заказ в работе, свяжитесь с менеджером
                    </CardSubTitle>
                </div>

                <div class="d-flex flex-wrap flex-row">
                    @foreach (var o in _orders)
                    {
                        <div class="me-2">
                            <UserOrderCardTemplate Order="o" OnUpdatePage="OnUpdatePage" />
                        </div>
                    }
                </div>
            </CardBody>
        </Card>
    </Authorized>
    <NotAuthorized>
        <HomeRedirect/>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<OrdersOutputModel> _orders;

    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }

    private List<Claim> claims = new List<Claim>();
    private int _userId;

    public Action OnUpdatePage;

    public UserOrders()
    {
        OnUpdatePage = UpdatePage;
        _orders = new List<OrdersOutputModel>();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await State;
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims.ToList();
            _userId = Int32.Parse(claims.Where(c => c.Type == "UserId").First().Value);
        }

        GetUserOrders();
    }

    private void GetUserOrders()
    {
        IOrderClient orderClient = new OrderClient();
        _orders = orderClient.GetUsersOrders(_userId);
        _orders.Reverse();
    }

    public void UpdatePage()
    {
        GetUserOrders();
        StateHasChanged();
    }

}
