@page "/myorders"
@using ConstellationOfDelicacies.Web.Components.Templates.User
@using ConstellationOfDelicacies.Web.Components.Pages.Auth
@using ConstellationOfDelicacies.Bll.Interfaces
@using ConstellationOfDelicacies.Bll.Clients
@using ConstellationOfDelicacies.Bll.Enums
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System
@rendermode InteractiveServer

<AuthorizeView Roles="Пользователь">
    <Authorized>
        <PageTitle>Мои заказы</PageTitle>

        @if (_orders.Count == 0)
        {
            <Card>
                <CardBody>
                    У вас еще нет заказов.
                </CardBody>
            </Card>
        } else
        {
            <div class="mb-2">
                <Button @onclick="AllOrders" Color="ButtonColor.Info">Все</Button>
                <Button @onclick="CreatedOrders" Color="ButtonColor.Warning">Созданы</Button>
                <Button @onclick="InProgressOrders" Color="ButtonColor.Primary">В работе</Button>
                <Button @onclick="CompletedOrders" Color="ButtonColor.Success">Завершенные</Button>
                <Button @onclick="DeletedOrders" Color="ButtonColor.Danger">Удаленные</Button>
            </div>
            <Card>
                <CardBody>
                    <div>
                        <CardTitle>Мои заказы:</CardTitle>
                        <CardSubTitle Style="margin-bottom: 5px;">
                            Чтобы отменить заказ в работе, свяжитесь с менеджером
                        </CardSubTitle>
                    </div>

                    <div class="d-flex flex-wrap flex-row">
                        @foreach (var o in _sortedOrders)
                        {
                            <div class="me-2">
                                <UserOrderCardTemplate Order="o" OnUpdatePage="OnUpdatePage" />
                            </div>
                        }
                    </div>
                </CardBody>
            </Card>
        }
    </Authorized>
    <NotAuthorized>
        <HomeRedirect/>
    </NotAuthorized>
</AuthorizeView>

@code {

    private List<OrdersOutputModel> _orders;
    private List<OrdersOutputModel> _sortedOrders;

    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }

    private List<Claim> claims = new List<Claim>();
    private int _userId;

    public Action OnUpdatePage;

    public UserOrders()
    {
        OnUpdatePage = UpdatePage;
        _orders = new List<OrdersOutputModel>();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await State;
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims.ToList();
            _userId = Int32.Parse(claims.Where(c => c.Type == "UserId").First().Value);
        }

        GetUserOrders();
    }

    private void GetUserOrders()
    {
        IOrderClient orderClient = new OrderClient();
        _orders = orderClient.GetUsersOrders(_userId);
        _orders.Reverse();
        _sortedOrders = _orders;
    }

    public void UpdatePage()
    {
        GetUserOrders();
        StateHasChanged();
    }

    private void AllOrders()
    {
        _sortedOrders = _orders;
        StateHasChanged();
    }

    private void CreatedOrders()
    {
        _sortedOrders = _orders.Where(o => o.Status == OrderStatuses.Created).ToList();
        StateHasChanged();
    }

    private void InProgressOrders()
    {
        _sortedOrders = _orders.Where(o => o.Status == OrderStatuses.InProgress).ToList();
        StateHasChanged();
    }

    private void DeletedOrders()
    {
        _sortedOrders = _orders.Where(o => o.Status == OrderStatuses.Deleted).ToList();
        StateHasChanged();
    }

    private void CompletedOrders()
    {
        _sortedOrders = _orders.Where(o => o.Status == OrderStatuses.Completed).ToList();
        StateHasChanged();
    }

}
