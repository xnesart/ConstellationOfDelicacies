@page "/login"
@using ConstellationOfDelicacies.Bll.Models.InputModels
@using System.Security.Claims
@using ConstellationOfDelicacies.Bll.Clients
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Mvc
@inject NavigationManager navManager

<Card>
    <CardBody>
        <div class="login-form">
            <EditForm class="row g-3" Model="@Model" OnValidSubmit="@StartLogin" FormName="LoginForm">
                <DataAnnotationsValidator />

                <div class="col-md-12">
                    <label for="login-mail" class="form-label">Введите электронную почту:</label>
                    <InputText type="email" class="form-control" id="login-mail" placeholder="E-mail"
                               @bind-Value="Model.Email" />
                </div>
                <div class="col-md-12">
                    <label for="login-pass" class="form-label">Введите пароль:</label>
                    <InputText type="password" class="form-control" id="login-pass" placeholder="Пароль"
                               @bind-Value="Model.Password" />
                </div>
                <div class="col-md-12" lass="col-12">
                    <button type="submit" class="btn btn-primary">Войти</button>
                    <a href="/registration" class="btn btn-warning">Зарегистрироваться</a>
                </div>

            </EditForm>
            @if (_authenticationFailed)
            {
                <div class="alert alert-danger" role="alert">
                    Аутентификация не удалась. Проверьте свои учетные данные и повторите попытку.
                </div>
            }
        </div>
    </CardBody>    
</Card>


@code {
    [SupplyParameterFromForm]
    public LoginInputModel Model { get; set; }

    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    private bool _authenticationFailed = false;
    private string _redirect { get; set; }

    public Login()
    {
        Model = new LoginInputModel();
    }

    public async Task StartLoginTest()
    {
        var claims = new List<Claim>()
        {
            new Claim(ClaimTypes.Role, "Менеджер")
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var pr = new ClaimsPrincipal(identity);

        await httpContext.SignInAsync(pr);

        navManager.NavigateTo("./");
    }

    public async Task StartLogin()
    {        
        UserClient userClient = new UserClient();
        if (userClient.CheckLoginRights(Model) == false)
        {
            Console.WriteLine("Аутентификация не удалась");
            _authenticationFailed = true;
            return;
        }
 
        RoleClient roleClient = new RoleClient();
        var role = roleClient.GetRoleByEmail(Model.Email);
        var userByEmail = userClient.GetUserByEmail(Model.Email);
        if (role != null && role.Title != null)
        {
            var claims = new List<Claim>()
            {
                new Claim(ClaimTypes.Email, Model.Email),
                new Claim("UserId", userByEmail.Id.ToString()),
                new Claim(ClaimTypes.Role, role.Title)
            }; 
            
            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var user = new ClaimsPrincipal(identity);

            await httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, user);

            navManager.NavigateTo("./");            
        }
    }

}
