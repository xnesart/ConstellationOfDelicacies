@using ConstellationOfDelicacies.Bll.Models.InputModels
@using ConstellationOfDelicacies.Bll.Interfaces
@using ConstellationOfDelicacies.Bll.Clients
@using ConstellationOfDelicacies.Bll.Enums

@if (isSubmited)
{
    <div class="alert alert-success">
        Название изменено на: @_submitedTitle
    </div>
}
@if (_isTitleInvalid)
{
    <div class="alert alert-danger">
        Недопустимое название задачи
    </div>
}
<EditForm class="row g-3" Model="@Model" FormName="EditTask">
    <DataAnnotationsValidator />

    <div class="col-md-12">
        <label for="task-title" class="form-label">Введите название:</label>
        <InputText class="form-control" @bind-Value="@Model.Title" id="task-title"
                   placeholder="Название">@OrderTask.Title</InputText>
    </div>
    <div class="col-12">
        <button type="submit" class="btn btn-primary" @onclick="EditTask">Изменить</button>
    </div>
</EditForm>

    @code {

    [Parameter, EditorRequired]
    public TasksOutputModel OrderTask { get; set; }

    [SupplyParameterFromForm]
    public TasksInputModel Model { get; set; }

    [Parameter]
    public Action UpdatePage { get; set; }

    private bool _isTitleInvalid;
    private bool isSubmited;
    private string _submitedTitle;

    public EditTaskTemplate()
    {
        Model = new TasksInputModel();
        _submitedTitle = "";
    }

    protected override void OnInitialized()
    {
        Model.Id = OrderTask!.Id;
        base.OnInitialized();
    }

    public void EditTask()
    {
        if (Model.Title == Roles.Manager.ToString() || Model.Title == Roles.User.ToString())
        {
            _isTitleInvalid = true;
            return;
        }
        _isTitleInvalid = false;

        ITaskClient taskClient = new TaskClient();
        taskClient.UpdateOrderTask(Model);

        _submitedTitle = Model.Title;
        isSubmited = true;

        Model = new TasksInputModel();

        UpdatePage();
    }

}
