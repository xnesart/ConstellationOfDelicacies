@using ConstellationOfDelicacies.Bll.Models.InputModels
@using ConstellationOfDelicacies.Bll.Clients
@using ConstellationOfDelicacies.Bll.Interfaces
@rendermode InteractiveServer

<EditForm Model="@Model" FormName="AddTaskWorker" OnValidSubmit="AddWorker">
    <DataAnnotationsValidator />

    <div class="col-md-12">
        <label for="task-specialization" class="form-label">Выберите специализацию:</label>
        <InputSelect disabled="@_isSpDisabled" class="form-control" id="task-specialization" 
                     @bind-Value="@Model.SpId">
            <option disabled selected value style="display:none"></option>
            @foreach (var s in _specializations)
            {
                <option value="@s.Id">@s.Title</option>
            }
        </InputSelect>
    </div>
    <div class="col-md-12">
        <label for="task-profile" class="form-label">Выберите профиль:</label>
        <InputSelect disabled="@_isPrDisabled" class="form-control" id="task-profile"
                     @bind-Value="@Model.PrId" @oninput="PrChanged">
            <option value=""></option>
            @foreach (var p in _profiles)
            {
                <option value="@p.Id">@p.Title</option>
            }
        </InputSelect>
    </div>
    <div class="col-md-12">
        <label for="task-worker" class="form-label">Выберите сотрудника:</label>
        <InputSelect disabled="@_isWorkerDisabled" class="form-control" id="task-worker"
                     @bind-Value="@Model.WorkerId">
            <option value=""></option>
            @foreach (var w in _workers)
            {
                <option value="@w.Id">@w.FirstName @w.LastName</option>
            }
        </InputSelect>
    </div>
    <div class="col-12 mt-2">
        <button type="submit" class="btn btn-primary">Добавить</button>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    public TasksInputModel Model { get; set; }

    [Parameter, EditorRequired]
    public TasksOutputModel OrderTask { get; set; }

    [Parameter]
    public Action UpdatePage { get; set; }

    private List<UsersOutputModel> _workers;
    private List<ProfilesOutputModel> _profiles;
    private List<SpecializationsOutputModel> _specializations;

    private bool _isSpDisabled = true;
    private bool _isPrDisabled;
    private bool _isWorkerDisabled;

    private int _spId { get; set; }

    public AddTaskWorkerTemplate()
    {
        Model = new TasksInputModel();
        _profiles = new List<ProfilesOutputModel>();
        _specializations = new List<SpecializationsOutputModel>();
        _workers = new List<UsersOutputModel>();
    }

    protected override void OnInitialized()
    {
        ISpecializationClient specializationClient = new SpecializationClient();
        _specializations = specializationClient.GetAllSpecializations();

        _isSpDisabled = true;
        ProfilesOutputModel anyPr = OrderTask.Profiles.First();
        _spId = specializationClient.GetSpByProfileId(anyPr.Id).Id;

        Model.SpId = _spId;
        Model.Title = OrderTask.Title;

        SpChanged();

        base.OnInitialized();
    }

    public void SpChanged()
    {
        _isPrDisabled = false;
        _isWorkerDisabled = true;
        _workers = new List<UsersOutputModel>();

        IProfileClient profileClient = new ProfileClient();
        _profiles = profileClient.GetProfiles(_spId);
        StateHasChanged();
    }

    public void PrChanged(ChangeEventArgs e)
    {
        _isWorkerDisabled = false;

        IUserClient userClient = new UserClient();
        _workers = userClient.GetUsersByProfile(Int32.Parse(e.Value.ToString()));
        StateHasChanged();
    }

    public void AddWorker()
    {
        Model.Id = OrderTask.Id;
        Model.Profiles = [new ProfilesInputModel() { Id = Model.PrId }];
        if (Model.WorkerId != null) Model.Users = [new UsersInputModel() { Id = Model.WorkerId }];

        ITaskClient taskClient = new TaskClient();
        taskClient.AddTaskWorker(Model);

        UpdatePage();
        StateHasChanged();
    }
}
