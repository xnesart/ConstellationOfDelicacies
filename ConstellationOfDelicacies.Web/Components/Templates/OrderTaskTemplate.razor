@using ConstellationOfDelicacies.Bll.Models.InputModels
@using ConstellationOfDelicacies.Bll.Clients
@using ConstellationOfDelicacies.Bll.Interfaces

<Modal @ref="modal" />

<Card Style="width:330px; margin-bottom: 10px; margin-right: 10px">
    <CardBody class="order-task-card">
        <div>
            <CardTitle>
                <div class="task-header">
                    <div class="task-header-title">
                        <p>@OrderTask.Title</p>
                        <p>Стоимость: @taskPrice</p>
                    </div>
                    <div class="task-status">
                        <TaskStatusTemplate Status="OrderTask.Status" />
                    </div>
                </div>
            </CardTitle>
            <CardText>
                <div class="task-workers">
                    <div>
                        <p class="order-tasks-title task-workers-title">Сотрудники:</p>
                    </div>
                    @if (OrderTask.Users.Count() == 0)
                    {
                        <div>
                            <p>не назначены</p>
                        </div>
                    }
                    else
                    {
                        <div>
                            @foreach (var u in OrderTask.Users)
                            {
                                <p>@u.FirstName @u.LastName</p>
                            }
                        </div>
                    }
                </div>
            </CardText>
        </div>        
        <div>
            <Button class="task-button" Color="ButtonColor.Primary" Type="ButtonType.Button" @onclick="EditTask">
                Изменить задачу
            </Button>
            <Button class="task-button" Color="ButtonColor.Primary" Type="ButtonType.Button" @onclick="EditWorkers">
                Изменить сотрудников
            </Button>
        </div>
        
    </CardBody>
</Card>

@code {
    [Parameter, EditorRequired]
    public TasksOutputModel OrderTask { get; set; }

    [Parameter]
    public Action UpdatePage { get; set; }

    private Modal modal = default!;

    private decimal taskPrice;

    protected override async Task OnInitializedAsync()
    {
        ITaskClient taskClient = new TaskClient();
        taskPrice = taskClient.GetOrderTaskPrice(OrderTask);
        base.OnInitialized();
    }

    private async Task EditTask()
    {
        modal.IsVerticallyCentered = true;
        modal.IsScrollable = true;

        var parameters = new Dictionary<string, object>();
        parameters.Add("OrderTask", OrderTask);
        parameters.Add("UpdatePage", UpdatePage);

        await modal.ShowAsync<EditTaskTemplate>(title: $"Изменить задачу: {OrderTask.Title}", parameters: parameters);
    }

    private async Task EditWorkers()
    {
        modal.IsVerticallyCentered = true;
        modal.IsScrollable = true;

        var parameters = new Dictionary<string, object>();
        parameters.Add("OrderTaskId", OrderTask.Id);
        parameters.Add("UpdatePage", UpdatePage);

        await modal.ShowAsync<EditTaskWorkersTemplate>(title: $"Изменить сотрудников: {OrderTask.Title}", 
                                                    parameters: parameters);
    }

}
