@using ConstellationOfDelicacies.Bll.Clients
@using ConstellationOfDelicacies.Bll.Interfaces
@using ConstellationOfDelicacies.Bll.Enums
@rendermode InteractiveServer

<Modal @ref="modal" title="Связь с менеджером" IsScrollable="true" IsVerticallyCentered="true">
    <BodyTemplate>
        <h3>Ваш менеджер: @_manager.FirstName @_manager.LastName</h3>
        <p>Номер телефона: @_manager.Phone</p>
        <p>Электронная почта: @_manager.Mail</p>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Закрыть</Button>
    </FooterTemplate>
</Modal>

@switch (Order.Status)
{
    case OrderStatuses.InProgress:
        <div class="d-inline alert alert-info task-status-alert text-center mb-2">В работе</div>
        <button class="btn btn-primary" @onclick="OnShowModalClick">Связаться</button>
        break;
    case OrderStatuses.Deleted:
        <div class="d-inline alert alert-danger task-status-alert text-center=">Удален</div>
        break;
    case OrderStatuses.Completed:
        <div class="d-inline alert alert-success task-status-alert text-center">Завершен</div>
        break;
    case OrderStatuses.Created:
        <div class="d-inline alert alert-warning task-status-alert text-center mb-2">Создан</div>
        <button class="btn btn-primary" @onclick="DeleteOrder">Отменить</button>
        break;
}

@code {

    [Parameter]
    public OrdersOutputModel Order { get; set; }

    [Parameter]
    public Action DeleteOrder { get; set; }

    private Modal modal = default!;

    private UsersOutputModel _manager;

    public UserOrderStatusTemplate()
    {
        _manager = new UsersOutputModel();
    }

    private async Task OnShowModalClick()
    {
        IUserClient userClient = new UserClient();
        _manager = userClient.GetOrderManager(Order.Id);
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

}
