@page "/waiter"
@using ConstellationOfDelicacies.Bll.IManager

<h3>Добавить официанта</h3>

    <div class="registration-form">
        <form class="row g-3">
            <div class="col-md-12">
                <label class="form-label">ФИО</label>
            <input class="form-control" placeholder="Введите ФИО" id="waiter-name" value="@_name" @oninput="AddName">
            </div>
            <div class="col-md-12">
                <label class="form-label">Электроная почта</label>
            <input class="form-control" placeholder="Электронная почта" id="waiter-mail" value="@_mail" @oninput="AddMail">
            </div>
            <div class="col-md-12">
                <label class="form-label">Номер телефона</label>
            <input class="form-control" placeholder="Номер телефона" id="waiter-phone" value="@_phone" @oninput="AddPhone">
            </div>
            <div class="col-md-12">
                 <label class="form-label">Должность</label>
            <select>
                @foreach(var p in Enum.GetNames<Post>())
                {
                    <option value="@p">@p</option>             
                }
            </select>
            </div>
            <div class="col-12">
                <button type="submit" class="btn btn-primary" onclick="@AddWaiters">Добавить</button>
                <a href="/waiters" class="btn btn-primary waiters-edit-back-button waiters-add-back-link">Вернуться назад</a>
            </div>
        </form>
    </div>

@code {
    private List<WorkerOutputModel> _waiters;
    private WorkerOutputModel _waiter;
    IManager manager;
    private string _name;
    private string _phone;
    private string _mail;

    private void AddName(ChangeEventArgs a)
    {
        _name = a.Value.ToString();
    }

    private void AddPhone(ChangeEventArgs a)
    {
        _phone = a.Value.ToString();
    }

    private void AddMail(ChangeEventArgs a)
    {
        _mail = a.Value.ToString();
    }

    private enum Post
    {
        WaiterNew = 1,
        WaiterThree,
        WaiterTwo,
        WaiterOne,
        WaiterHigt,
        Sommelier
    }

    public AddWaiter()
    {
        manager = new ManagerMock();
        _waiters = manager.GetAllChiefs();
    }

    private void AddWaiters()
    {
        int lastWaiterId = manager.GetWaitersLastId();
        lastWaiterId++;

        WorkerOutputModel model = new WorkerOutputModel
            {
                Id = lastWaiterId,
                Name = _name,
                Phone = _phone,
                Mail = _mail

            };
        manager.AddWaiter(model);
    }
}